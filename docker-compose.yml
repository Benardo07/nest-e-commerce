version: "3.9"
services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: ecommerce
      POSTGRES_PASSWORD: ecommerce
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"

  kafka:
    image: bitnami/kafka:3.6
    restart: unless-stopped
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami/kafka

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://ecommerce:ecommerce@postgres:5432/ecommerce
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: kafka:9092
      JWT_ACCESS_SECRET: supersecretaccesskeysupersecretaccesskey
      JWT_REFRESH_SECRET: supersecretrefreshkeysupersecretrefreshkey
    ports:
      - "3000:3000"

  worker:
    build:
      context: .
      dockerfile: apps/worker/Dockerfile
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://ecommerce:ecommerce@postgres:5432/ecommerce
      REDIS_URL: redis://redis:6379/0
      KAFKA_BROKERS: kafka:9092
      JWT_ACCESS_SECRET: supersecretaccesskeysupersecretaccesskey
      JWT_REFRESH_SECRET: supersecretrefreshkeysupersecretrefreshkey

volumes:
  postgres-data:
  kafka-data:
